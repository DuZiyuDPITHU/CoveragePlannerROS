// 包含所需的头文件
#include <ros/ros.h>
#include <nav_msgs/Path.h>
#include <geometry_msgs/PoseStamped.h>
//test map info
int contours[][2] = {
    // polygon 0 points: 
    {7, 359}, {6, 401}, {16, 401}, {21, 408}, {28, 407}, {24, 385}, {26, 375}, {71, 376}, {76, 368}, {83, 368}, {88, 391}, {115, 395}, {112, 404}, {93, 405}, {95, 428}, {106, 421}, {113, 421}, {118, 427}, {124, 424}, {122, 391}, {132, 389}, {136, 393}, {136, 466}, {122, 471}, {124, 516}, {171, 514}, {171, 509}, {158, 505}, {160, 486}, {173, 486}, {177, 499}, {188, 503}, {191, 515}, {238, 514}, {236, 506}, {210, 506}, {212, 498}, {221, 497}, {223, 485}, {236, 485}, {239, 497}, {257, 504}, {261, 496}, {284, 498}, {286, 423}, {282, 414}, {289, 393}, {299, 397}, {298, 416}, {302, 421}, {340, 421}, {346, 417}, {356, 421}, {354, 439}, {359, 447}, {354, 451}, {354, 461}, {360, 469}, {354, 473}, {355, 480}, {371, 479}, {376, 468}, {384, 468}, {389, 479}, {426, 485}, {427, 503}, {417, 507}, {419, 514}, {487, 513}, {486, 506}, {472, 503}, {473, 485}, {489, 488}, {489, 500}, {499, 504}, {498, 511}, {520, 512}, {522, 504}, {514, 503}, {512, 495}, {520, 493}, {523, 500}, {529, 500}, {526, 488}, {538, 484}, {540, 476}, {554, 473}, {552, 418}, {425, 413}, {428, 401}, {510, 401}, {510, 379}, {473, 379}, {463, 373}, {468, 352}, {459, 346}, {456, 302}, {447, 298}, {447, 277}, {467, 275}, {467, 270}, {458, 269}, {455, 263}, {456, 239}, {466, 235}, {463, 217}, {358, 218}, {349, 225}, {369, 231}, {380, 242}, {380, 249}, {365, 259}, {357, 255}, {357, 250}, {348, 249}, {338, 265}, {331, 260}, {331, 248}, {343, 245}, {343, 230}, {309, 220}, {310, 227}, {299, 232}, {296, 253}, {310, 256}, {307, 264}, {297, 264}, {297, 283}, {307, 291}, {307, 314}, {297, 319}, {298, 336}, {290, 340}, {285, 337}, {283, 305}, {278, 301}, {283, 292}, {284, 249}, {280, 246}, {280, 235}, {272, 232}, {273, 220}, {262, 220}, {256, 229}, {245, 227}, {241, 220}, {235, 221}, {242, 233}, {232, 249}, {222, 250}, {217, 247}, {223, 221}, {204, 220}, {197, 215}, {199, 207}, {212, 204}, {210, 161}, {177, 162}, {178, 205}, {188, 206}, {192, 214}, {175, 221}, {170, 249}, {155, 247}, {155, 231}, {163, 227}, {161, 221}, {148, 222}, {142, 231}, {131, 221}, {129, 228}, {119, 233}, {119, 266}, {134, 271}, {136, 374}, {132, 382}, {120, 380}, {118, 335}, {109, 336}, {109, 346}, {103, 350}, {98, 347}, {98, 336}, {89, 336}, {88, 352}, {78, 359}, {53, 355}, {49, 339}, {30, 341}, {26, 353}, {13, 351}, 
    // polygon 1 points: 
    {185, 461}, {187, 469}, {177, 473}, {175, 464}, 
    // polygon 2 points: 
    {251, 450}, {261, 453}, {258, 462}, {248, 459}, 
    // polygon 3 points: 
    {157, 452}, {166, 450}, {170, 458}, {159, 461}, 
    // polygon 4 points: 
    {185, 452}, {198, 449}, {201, 458}, {186, 462}, 
    // polygon 5 points: 
    {403, 447}, {413, 445}, {416, 453}, {405, 456}, 
    // polygon 6 points: 
    {422, 433}, {439, 433}, {443, 437}, {441, 481}, {421, 479}, {419, 465}, {432, 464}, {431, 446}, {420, 443}, 
    // polygon 7 points: 
    {374, 434}, {384, 432}, {387, 440}, {376, 443}, 
    // polygon 8 points: 
    {251, 432}, {261, 435}, {257, 445}, {248, 442}, 
    // polygon 9 points: 
    {181, 426}, {166, 444}, {157, 442}, {157, 434}, {169, 432}, {171, 423}, 
    // polygon 10 points: 
    {240, 419}, {243, 427}, {233, 431}, {234, 439}, {228, 445}, {233, 459}, {225, 467}, {208, 465}, {208, 449}, {203, 443}, {185, 442}, {185, 434}, {191, 428}, {203, 430}, {207, 424}, {214, 424}, {219, 429}, {229, 429}, {233, 419}, 
    // polygon 11 points: 
    {159, 359}, {176, 364}, {172, 377}, {157, 375}, 
    // polygon 12 points: 
    {222, 358}, {239, 361}, {235, 376}, {219, 373}, 
    // polygon 13 points: 
    {285, 357}, {301, 361}, {302, 371}, {292, 377}, {282, 372}, 
    // polygon 14 points: 
    {347, 356}, {364, 359}, {365, 370}, {361, 375}, {345, 372}, 
    // polygon 15 points: 
    {410, 355}, {426, 358}, {424, 375}, {408, 372}, 
    // polygon 16 points: 
    {259, 294}, {262, 301}, {250, 313}, {243, 313}, {240, 304}, {248, 301}, {250, 293}, 
    // polygon 17 points: 
    {411, 281}, {423, 276}, {437, 286}, {437, 292}, {417, 299}, 
    // polygon 18 points: 
    {250, 276}, {261, 279}, {256, 288}, {248, 286}, 
    // polygon 19 points: 
    {362, 268}, {365, 278}, {349, 286}, {349, 271}, 
    // polygon 20 points: 
    {182, 273}, {188, 267}, {197, 268}, {201, 286}, {205, 287}, {210, 268}, {224, 269}, {233, 279}, {228, 288}, {233, 302}, {218, 307}, {211, 317}, {200, 309}, {188, 311}, {184, 297}, {194, 290}, {184, 287}, 
    // polygon 21 points: 
    {170, 259}, {173, 266}, {166, 272}, {168, 313}, {153, 316}, {148, 313}, {148, 274}, {152, 267}, {161, 266}, {163, 259}, 
    // polygon 22 points: 
    {392, 255}, {397, 251}, {423, 251}, {427, 259}, {416, 264}, {413, 272}, {401, 276}, {393, 267}, 
    // polygon 23 points: 
    {408, 225}, {420, 224}, {424, 228}, {424, 242}, {420, 246}, {406, 244}, 
    // polygon 24 points: 
    {188, 175}, {199, 178}, {196, 188}, {186, 186}  
};
int count_size[] = {0, 191, 4, 4, 4, 4, 4, 9, 4, 4, 6, 19, 4, 4, 5, 5, 4, 7, 5, 4, 4, 17, 10, 8, 6, 4, 0};
// 主函数
int main(int argc, char **argv)
{
    // 初始化ROS节点
    ros::init(argc, argv, "contour_detection");
    ros::NodeHandle nh;
    ros::Rate loop_rate(0.001);
    ros::Rate pub_rate(2);

    // 创建一个Publisher，用于发布nav_msgs/Path消息
    ros::Publisher contour_pub = nh.advertise<nav_msgs::Path>("contour", 1);

    

    while (ros::ok())
    {
        int count_ = 0;

        for (int i = 0; i < sizeof(count_size) / sizeof(count_size[0]); i++)
        {
            nav_msgs::Path contour;
            contour.header.stamp = ros::Time::now();
            contour.header.frame_id = "map";
            contour.header.seq = i;
            for (int j = 0; j < count_size[i]; j++)
            {
                geometry_msgs::PoseStamped pose_stamped;
                pose_stamped.header.stamp = ros::Time::now();
                pose_stamped.header.frame_id = "map";
                pose_stamped.pose.position.x = contours[count_][0];
                pose_stamped.pose.position.y = contours[count_][1];
                pose_stamped.pose.position.z = 0.0;
                pose_stamped.pose.orientation.w = 1.0;

                contour.poses.push_back(pose_stamped);
                count_++;
            }
            contour_pub.publish(contour);
            ROS_INFO("One contour published.");
            pub_rate.sleep();
        }
        ROS_WARN("All contours published.");

        ros::spinOnce();
        loop_rate.sleep();
    }

    return 0;
}

